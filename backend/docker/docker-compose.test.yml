services:
  backend:
    build:
      context: ../..
      dockerfile: backend/docker/Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - ${PROJECT_ROOT:-../..}:/app
      # Ensure logs are properly mounted with host permissions
      - ${PROJECT_ROOT:-../..}/logs:/app/logs:rw
    # Using environment variables directly instead of env file
    # to ensure consistent test environment
    depends_on:
      - db
      - redis
    networks:
      - restaurant-network
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/restaurant
      - TEST_DATABASE_URL=postgresql://postgres:postgres@db:5432/restaurant
      - DATABASE_SCHEMA=getinn_ops
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - INITIALIZE_DB=true
      - RESET_DB=false
      # Bot conversation logging settings
      - BOT_LOG_LEVEL=DEBUG
      - BOT_LOG_FORMAT=json
      - BOT_FILE_LOGGING=true
      - BOT_LOG_DIR=/app/logs
      # Test settings
      - PYTHONPATH=/app
      - JWT_SECRET_KEY=testsecretkey
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - LOG_FILE=/app/logs/test_results.log
    command: >
      bash -c "set -e
        
        # Create log directory and files
        mkdir -p /app/logs
        chmod 777 /app/logs
        echo 'Creating test log files...'
        
        # Create log file with proper permissions
        touch /app/logs/test_results.log
        chmod 666 /app/logs/test_results.log
        echo \"Test output will be saved to: /app/logs/test_results.log\" &&
        
        ls -la /app/logs &&
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        python -m pip install -r requirements-dev.txt &&
        echo "Looking for tests in: ${TEST_ARGS}" &&
        # Check if test files/directories actually exist before running
        echo "Listing available test directories:" &&
        find /app/tests -type d | grep -E "integration|unit|bot|scenario" | sort &&
        echo "Listing bot scenario test files specifically:" &&
        find /app/tests -path "*bot*" -o -path "*scenario*" | grep "\.py$" | grep -v "__" &&
        
        # First check if specific paths exist
        if [ -n "${TEST_ARGS}" ]; then
          echo "Running specified tests: ${TEST_ARGS}" &&
          # Run tests with full output formatting and save to both log and console
          python -m pytest -vvs --no-header --capture=tee-sys ${TEST_ARGS} 2>&1 | tee -a "$LOG_FILE" || \
            { echo "Failed to run specified tests: ${TEST_ARGS}" | tee -a "$LOG_FILE"; exit 1; }
        else
          # Run default tests if no specific paths are provided
          echo "Running default tests" &&
          # Run tests with full output formatting and save to both log and console
          python -m pytest -xvs --no-header /app/tests/integration/bot_scenarios/test_simple_scenario.py || \
            { echo "Failed to run default tests" | tee -a "$LOG_FILE"; exit 1; }
        fi
      "

  db:
    image: postgres:15
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=restaurant
    ports:
      - "5433:5432"
    networks:
      - restaurant-network

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    networks:
      - restaurant-network

networks:
  restaurant-network:
    driver: bridge

volumes:
  postgres_test_data: